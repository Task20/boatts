name: 'publish'

on:
  push:
    branches:
      - release
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running manually'
        required: false



# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: update submodule
        run: git submodule update --remote --merge

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf


      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.


      - name: Read content version
        id: contentversion
        run: |
          VERSION="$(python - <<'PY'
          import sys, pathlib, subprocess
          try:
            import yaml
          except ImportError:
              subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", "pyyaml"])
              import yaml
          p = pathlib.Path("public/content/manifest.yml")
          with p.open("r", encoding="utf-8") as f:
              data = yaml.safe_load(f)
          v = data.get("versionNumber")
          if not v:
              raise SystemExit("versionNumber not found in manifest")
          print(v)
          PY
          )"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        shell: bash


      - name: generate public key
        id: keygen
        uses: Task20/keygen/.github/actions/keygen@ec4e41792ebf69d9921fd5c6add9023ea546a538
        with:
          version: ${{steps.contentversion.version}}
          master-password: ${{secrets.MASTER_PASSWORD}}

      - name: write public key
        shell: bash
        run: |
          echo "${{steps.keygen.outputs.public-key}}" > public/key.pub

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: boatts-v__VERSION__-${{steps.contentversion.version}}c # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'Boatts v__VERSION__-${{steps.contentversion.version}}c'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
